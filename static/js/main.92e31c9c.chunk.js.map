{"version":3,"sources":["NodeState.js","NodeTypes.js","NodeComponents.js","App.js","parse.js","index.js"],"names":["setAtIndex","array","elements","Object","assign","_home_johannes_Documents_js_regex_nodes_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_4__","GraphState","create","nodes","nextId","seed","addNode","graph","node","autoconnectTarget","id","newGraph","_home_johannes_Documents_js_regex_nodes_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_3__","_home_johannes_Documents_js_regex_nodes_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__","type","connected","connect","addNodeWithInputs","console","log","autoconnectResult","keys","length","extractInputs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","properties","Symbol","iterator","next","done","property","value","inputNodeId","err","return","move","index","movement","newPosition","x","position","y","newNode","node1Index","node2Index","property2Index","node2","property2","duplicateOnConnect","_setAtIndex","setNodeInput","nodeIndex","propertyIndex","build","NodeState","generate","random","generateSeeded","i","Random","_home_johannes_Documents_js_regex_nodes_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","Math","abs","maximum","floor","normalized","min","max","upto","chance","result","NodeTypes","defaultProperties","width","defaultWidth","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","name","PropertyTypes","createWithInputValues","inputs","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","input","push","PropertyState","ViewState","sensitivity","offset","magnification","getTransformScale","pow","magnify","view","target","direction","newMagnification","newTransformScale","deltaScale","transformPoint","point","transformDirection","size","transformLength","inverseTransformLength","inverseTransformSize","height","inverseTransformDirection","inverseTransformPoint","__webpack_require__","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_NodeState__WEBPACK_IMPORTED_MODULE_1__","Label","render","Characters","characters","props","a","createElement","className","onChange","event","onMouseDown","e","button","stopPropagation","preventDefault","onClick","onKeyPress","Character","character","Node","Bool","checked","Number","literalRegexNodeType","regex","generator","precedence","_","findCharacter","literalCharacterNodeType","char","buildPropertyInput","generatePropertyInput","buildInputWithPrecedence","ownPrecedence","inputPrecedence","rawInput","Expression Result","Not Digit","Word Char","Not Word Char","Word Boundary","Not Word Boundary","Digit","_properties","Whitespace Char","select","Not Whitespace Char","Not Linebreak","Linebreak","Tab","Never","Any","Literal","escapeInput","Any of Chars","escapeCharsInBracket","None of Chars","Char Range","escapeCharacter","start","charCodeAt","end","charCode","range","String","fromCharCode","Not in Char Range","Any Of","filter","p","map","join","Sequence","Capture","Optional","At Least One","Any Repetition","Exact Repetition","Ranged Repetition","count","If At End","If At Start","If Followed By","If Not Followed By","escapeCharacters","chars","includes","regexSource","RegExp","notStrangeWhitespace","test","RawConnectionComponent","x1","y1","x2","node1","y2","propertyHeight","h1dx","h2dx","react__WEBPACK_IMPORTED_MODULE_1___default","concat","ConnectionComponent","PropertyComponent","connectOutput","connectInput","style","onContextMenu","onMouseEnter","onPropertyEnter","onLeftPress","onRightPress","newValue","NodeComponent","selected","connecting","dragged","transform","onInputChanged","AppState","connection","search","state","updateCache","_home_johannes_Documents_js_regex_nodes_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_6__","pressMove","pressConnect","release","moveNode","delta","moveConnect","deltaY","nextRandomSeed","exampleText","cache","compiledRegex","eval","words","repeat","split","splice","augmentedExampleText","matches","match","fillStart","exec","fill","slice","lastIndex","_ref","react__WEBPACK_IMPORTED_MODULE_7___default","parseRegexToNodes","parse","App","_this","_home_johannes_Documents_js_regex_nodes_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_home_johannes_Documents_js_regex_nodes_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_johannes_Documents_js_regex_nodes_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","initialNode","window","innerWidth","innerHeight","_this2","listener","document","addEventListener","ctrlKey","key","setState","removeEventListener","_this3","scale","searchRegex","entries","_ref2","_ref3","_home_johannes_Documents_js_regex_nodes_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","_NodeComponents__WEBPACK_IMPORTED_MODULE_10__","onWheel","sign","clientX","clientY","onMouseUp","onMouseLeave","onMouseMove","movementX","movementY","_ref4","_ref5","src","process","href","rel","placeholder","autoFocus","onFocus","onBlur","onKeyDown","keyCode","_ref6","_ref7","_ref8","_ref9","React","Component","string","parseExpressionResult","startsWith","expression","flags","multipleMatches","caseSensitive","multiline","parseAlternation","predicate","endSequence","remaining","first","parseSequence","options","sequence","members","member","parsePositioned","simplified","_i","last","parseLookahead","parseQuantified","atom","parseAtom","minimal","isMinimal","closing","indexOf","limits","parseInt","parseCharset","parseEscapedAtom","_home_johannes_Documents_js_regex_nodes_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","escape","digit","word","white","tab","linebreak","boundary","parseGroup","parseCapturingGroup","parseCharAtom","dot","escapeNodes","escapeNode","parseCharLiteral","s","S","b","B","w","W","D",".","t","alternation","r","react_dom__WEBPACK_IMPORTED_MODULE_1__","react_dom__WEBPACK_IMPORTED_MODULE_1___default","_App__WEBPACK_IMPORTED_MODULE_3__","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.92e31c9c.chunk.js","sourcesContent":["import { NodeTypes, PropertyTypes } from \"./NodeTypes\"\n\nconst setAtIndex = (array, elements) => Object.assign([...array], elements)\n\n\nconst GraphState = {\n\tcreate: () => ({\n\t\tnodes: {},\n\t\tnextId: 0,\n\t\tseed: 1,\n\t}),\n\n\taddNode: (graph, node, autoconnectTarget) => {\n\t\tconst id = graph.nextId\n\n\t\tconst newGraph = {\n\t\t\t...graph, nextId: graph.nextId + 1,\n\t\t\tnodes: { ...graph.nodes, [id]: node }\n\t\t}\n\n\t\tif (autoconnectTarget != null){\n\t\t\t// connect first node if nothing is connected yet\n\t\t\tif (graph.nodes[autoconnectTarget].type == \"Expression Result\"){\n\t\t\t\tconst connected = GraphState.connect(newGraph, id, autoconnectTarget, 0)\n\t\t\t\tif (connected) return connected\n\t\t\t}\n\t\t}\n\n\t\treturn newGraph\n\t},\n\n\t// convert properties containing real nodes to properties containing indices\n\taddNodeWithInputs: (graph, node) => {\n\t\tconsole.log(node)\n\t\tconst autoconnectResult = Object.keys(graph.nodes).length == 1 ? \n\t\t\tObject.keys(graph.nodes)[0] : null\n\n\t\tconst extractInputs = node => {\n\t\t\tfor (let property of node.properties)\n\t\t\t\tif (property.type === \"Node\" && property.value != null){\n\t\t\t\t\textractInputs(property.value)\n\n\t\t\t\t\tconst inputNodeId = graph.nextId\n\t\t\t\t\tgraph = GraphState.addNode(graph, property.value)\n\t\t\t\t\tproperty.value = inputNodeId\n\t\t\t\t}\n\t\t}\n\n\t\textractInputs(node)\n\t\treturn GraphState.addNode(graph, node, autoconnectResult)\n\t},\n\n\tmove: (graph, index, movement) => {\n\t\tif (index == null) return graph\n\t\tconst node = graph.nodes[index]\n\t\tconst newPosition = { x: node.position.x + movement.x, y: node.position.y + movement.y }\n\t\tconst newNode = { ...node, position: newPosition }\n\t\treturn { ...graph, nodes: { ...graph.nodes, [index]: newNode } }\n\t},\n\n\t// TODO not crash on cyclic connections!\n\tconnect: (graph, node1Index, node2Index, property2Index) => {\n\t\tif (node1Index === node2Index) return null\n\n\t\tconst node2 = graph.nodes[node2Index]\n\t\tconst property2 = node2.properties[property2Index]\n\t\tif (!property2 || property2.type !== \"Node\") return null\n\t\tif (property2.value === node1Index) return null\n\n\t\tconst connected = { ...property2, value: node1Index }\n\n\t\t// TODO unclone on disconnect\n\n\t\t// clone this property if required\n\t\tif (property2.duplicateOnConnect && property2.value == null){\n\t\t\tconst properties = setAtIndex(node2.properties, {\n\t\t\t\t[property2Index]: connected,\n\t\t\t\t[node2.properties.length]: { ...property2, value: null }\n\t\t\t})\n\n\t\t\tconst nodes = { ...graph.nodes, [node2Index]: { ...node2, properties  }}\n\t\t\treturn { ...graph, nodes }\n\t\t}\n\n\t\telse return { ...graph, nodes: { ...graph.nodes, [node2Index]: { \n\t\t\t...node2, properties: setAtIndex(node2.properties, { [property2Index]: connected })\n\t\t}}}\n\t},\n\n\tsetNodeInput: (graph, nodeIndex, propertyIndex, value) => {\n\t\tif (nodeIndex == null) return graph\n\t\tconst node = graph.nodes[nodeIndex]\n\t\tconst property = node.properties[propertyIndex]\n\t\tconst newNode = { ...node, properties: setAtIndex(node.properties, { \n\t\t\t[propertyIndex]: { ...property, value } \n\t\t}) }\n\n\t\treturn { ...graph, nodes: { ...graph.nodes, [nodeIndex]: newNode } }\n\t},\n\n\tbuild: (index, graph) => {\n\t\tif (index == null) return \"(?!)\" // return a match that matches nothing\n\t\telse return NodeState.build(graph.nodes[index], graph)\n\t},\n\n\tgenerate: (index, random, graph) => {\n\t\tif (index == null) return \"\"\n\t\telse return NodeState.generate(graph.nodes[index], random, graph)\n\t},\n\n\tgenerateSeeded: (index, graph, i) => GraphState.generate(index, new Random(graph.seed + i), graph),\n}\n\nclass Random {\n\tconstructor(seed){ this.seed = seed }\n\n\tnormalized(){\n\t\tconst irrational = 1.61803398874989484820458683436563811772030917980576286213544862270526046281890\n\t\treturn (Math.abs(this.seed++) * irrational) % 1\n\t}\n\n\tupto(maximum) { return Math.floor(this.normalized() * maximum) }\n\trange(min, max) { return min + this.upto(max - min) }\n\tselect(array) { return array[this.upto(array.length)] }\n\tchance(chance) { return this.normalized() < chance }\n}\n\n\nconst propertyHeight = 25\n\nconst NodeState = {\n\tcreate: (position, type) => {\n\t\tconst result = ({\n\t\t\tposition, type, properties: NodeTypes[type].defaultProperties(),\n\t\t\twidth: NodeTypes[type].defaultWidth\n\t\t})\n\n\t\tif (!result.width){\n\t\t\tresult.width = 80\n\t\t\tfor (let property of result.properties)\n\t\t\t\tresult.width = Math.max(result.width, property.name.length * 9.5 + PropertyTypes[property.type].defaultWidth)\n\t\t}\n\n\t\tresult.position.x -= result.width / 2\n\t\tresult.position.y -= (result.properties.length / 2) * propertyHeight\n\n\t\treturn result\n\t},\n\n\tcreateWithInputValues: (position, type, inputs) => {\n\t\tconst node = NodeState.create(position, type)\n\t\tlet propertyIndex = 0\n\n\t\tfor (let input of inputs){\n\t\t\t// skip title properties\n\t\t\twhile(propertyIndex < node.properties.length && node.properties[propertyIndex].type == \"Label\")\n\t\t\t\tpropertyIndex++\n\n\t\t\t// duplicate property if necessary\n\t\t\tif (node.properties[propertyIndex].duplicateOnConnect)\n\t\t\t\tnode.properties.push({... node.properties[propertyIndex] })\n\n\t\t\t// set property\n\t\t\tnode.properties[propertyIndex].value = input\n\t\t\tpropertyIndex++\n\t\t}\n\n\t\treturn node\n\t},\n\n\tbuild: (node, graph) => NodeTypes[node.type].build(node.properties, graph),\n\tgenerate: (node, random, graph) => NodeTypes[node.type].generate(node.properties, random, graph),\n}\n\nconst PropertyState = {\n\tcreate: (type, name, value, duplicateOnConnect) => ({\n\t\ttype, value, name, duplicateOnConnect\n\t}),\n}\n\n\nconst ViewState = {\n\tsensitivity: 0.4,\n\n\tcreate: () => ({\n\t\toffset: { x: 300, y: 200 },\n\t\tmagnification: 0\n\t}),\n\n\tgetTransformScale: magnification => Math.pow(2, magnification * ViewState.sensitivity),\n\t\n\tmagnify: (view, target, direction) => {\n\t\tconst newMagnification = view.magnification + direction\n\t\tconst newTransformScale = ViewState.getTransformScale(newMagnification)\n\t\tif (newTransformScale < 0.1 || newTransformScale > 20) return view\n\n\t\tconst oldTransformScale = ViewState.getTransformScale(view.magnification)\n\t\tconst deltaScale = newTransformScale / oldTransformScale\n\n\t\treturn {\n\t\t\tmagnification: newMagnification,\n\t\t\toffset: {\n\t\t\t\tx: (view.offset.x - target.x) * deltaScale + target.x,\n\t\t\t\ty: (view.offset.y - target.y) * deltaScale + target.y,\n\t\t\t}\n\t\t}\n\t},\n\n\ttransformPoint: (view, point) => ({\n\t\tx: point.x * ViewState.getTransformScale(view.magnification) + view.offset.x,\n\t\ty: point.y * ViewState.getTransformScale(view.magnification) + view.offset.y,\n\t}),\n\n\ttransformDirection: (view, size) => ({\n\t\tx: ViewState.transformLength(view, size.x),\n\t\ty: ViewState.transformLength(view, size.y),\n\t}),\n\n\ttransformLength: (view, length) => length * ViewState.getTransformScale(view.magnification),\n\n\tinverseTransformLength: (view, length) => length / ViewState.getTransformScale(view.magnification),\n\n\tinverseTransformSize: (view, size) => ({\n\t\twidth: size.width / ViewState.getTransformScale(view.magnification),\n\t\theight: size.height / ViewState.getTransformScale(view.magnification),\n\t}),\n\n\tinverseTransformDirection: (view, direction) => ({\n\t\tx: direction.x / ViewState.getTransformScale(view.magnification),\n\t\ty: direction.y / ViewState.getTransformScale(view.magnification),\n\t}),\n\n\tinverseTransformPoint: (view, point) => ({\n\t\tx: (point.x - view.offset.x) / ViewState.getTransformScale(view.magnification),\n\t\ty: (point.y - view.offset.y) / ViewState.getTransformScale(view.magnification),\n\t}),\n}\n\nexport { GraphState, NodeState, PropertyState, ViewState }","import React from 'react'\n\nimport { GraphState, PropertyState } from \"./NodeState\"\n\n\nconst PropertyTypes = {\n\tLabel: {\n\t\tdefaultWidth: 0,\n\t\tcreate: name => PropertyState.create(\"Label\", name, null), \n\t\trender: () => null,\n\t},\n\n\tCharacters: {\n\t\tdefaultWidth: 60,\n\t\tcreate: (name, characters) => PropertyState.create(\"Characters\", name, characters), \n\t\trender: props => <input \n\t\t\tclassName=\"input\"\n\t\t\ttype=\"text\" value={props.value} \n\t\t\tonChange = { event => props.onChange(event.target.value) }\n\t\t\tonMouseDown = {e => { if (e.button == 0) e.stopPropagation(); else e.preventDefault() }}\n\t\t\tonClick = {e => e.stopPropagation()}\n\t\t\tonKeyPress = {e => e.stopPropagation()}\n\t\t/>\n\t},\n\n\tCharacter: {\n\t\tdefaultWidth: 30,\n\t\tcreate: (name, character) => PropertyState.create(\"Character\", name, character), \n\t\trender: props => <input \n\t\t\tclassName=\"character input\"\n\t\t\ttype=\"text\" value={props.value} \n\t\t\tonChange = { event => props.onChange(event.target.value) }\n\t\t\tonMouseDown = {e => { if (e.button == 0) e.stopPropagation(); else e.preventDefault() }}\n\t\t\tonClick = {e => e.stopPropagation()}\n\t\t\tonKeyPress = {e => e.stopPropagation()}\n\t\t></input>\n\t},\n\n\tNode: {\n\t\tdefaultWidth: 0,\n\t\tcreate: (name, duplicateOnConnect) => PropertyState.create(\"Node\", name, null, duplicateOnConnect), \n\t\trender: () => null, // rendered as svg lines earlier\n\t},\n\n\tBool: {\n\t\tdefaultWidth: 30,\n\t\tcreate: (name, checked) => PropertyState.create(\"Bool\", name, checked), \n\t\trender: props => <input \n\t\t\tclassName=\"input\"\n\t\t\ttype=\"checkbox\" checked={props.value} onChange={e => props.onChange(e.target.checked)}\n\t\t\tonMouseDown = {e => { if (e.button == 0) e.stopPropagation(); else e.preventDefault() }}\n\t\t\tonClick = {e => e.stopPropagation()}\n\t\t\tonKeyPress = {e => e.stopPropagation()}\n\t\t/> \n\t},\n\n\tNumber: {\n\t\tdefaultWidth: 30,\n\t\tcreate: (name, value) => PropertyState.create(\"Number\", name, value), \n\t\trender: props => <input\n\t\t\tclassName=\"input\"\n\t\t\ttype=\"number\" value={props.value} \n\t\t\tonChange = { event => props.onChange(event.target.value) }\n\t\t\tonMouseDown = {e => { if (e.button == 0) e.stopPropagation(); else e.preventDefault() }}\n\t\t\tonClick = {e => e.stopPropagation()}\n\t\t\tonKeyPress = {e => e.stopPropagation()}\n\t\t/>\n\t},\n}\n\n\nconst literalRegexNodeType = (name, regex, generator) => ({\n\tprecedence: 5,\n\tdefaultProperties: () => [ PropertyTypes.Label.create(name) ],\n\tbuild: () => regex,\n\tgenerate: generator || ((_, random) => findCharacter(random, regex)),\n})\n\nconst literalCharacterNodeType = (name, regex, char) => ({\n\tprecedence: 5,\n\tdefaultProperties: () => [ PropertyTypes.Label.create(name) ],\n\tbuild: () => regex,\n\tgenerate: () => char,\n})\n\nconst buildPropertyInput = (property, graph) => GraphState.build(property.value, graph,)\nconst generatePropertyInput = (property, random, graph) => GraphState.generate(property.value, random, graph)\n\n// put parantheses around arguments which have stronger precedence than ourselves\nconst buildInputWithPrecedence = (ownPrecedence, input, graph) => {\n\tif (input.value == null) return buildPropertyInput(input, graph)\n\n\tconst node = graph.nodes[input.value]\n\tconst inputPrecedence = NodeTypes[node.type].precedence\n\n\tconst rawInput = buildPropertyInput(input, graph)\n\tif (inputPrecedence >= ownPrecedence) return rawInput\n\telse return \"(?:\" + rawInput + \")\"\n}\n\n// operators group their operands, nothing is grouping itself\nconst NodeTypes = {\n\t\"Expression Result\": {\n\t\tprecedence: 0,\n\t\tdefaultProperties: () => [\n\t\t\tPropertyTypes.Node.create(\"Expression Result\"), // same name as node itself will collapse\n\t\t\tPropertyTypes.Bool.create(\"Multiple Matches\", true),\n\t\t\tPropertyTypes.Bool.create(\"Case-Sensitive\", true),\n\t\t\tPropertyTypes.Bool.create(\"Multiline\", true),\n\t\t\t// TODO: u, s (for es2018)\n\t\t],\n\n\t\tbuild: (properties, graph) => {\n\t\t\tlet result = \"/\" + buildPropertyInput(properties[0], graph) + \"/\"\n\t\t\tif (properties[1].value) result += \"g\"\n\t\t\tif (!properties[2].value) result += \"i\"\n\t\t\tif (properties[3].value) result += \"m\"\n\t\t\treturn result\n\t\t},\n\n\t\tgenerate: (properties, random, graph) => {\n\t\t\t// TODO customize generated input according to flags \n\t\t\treturn generatePropertyInput(properties[0], random, graph)\n\t\t},\n\t},\n\n\t\"Not Digit\": literalRegexNodeType(\"Not Digit\", \"\\\\D\"),\n\t\"Word Char\": literalRegexNodeType(\"Word Char\",\"\\\\w\"), // includes asian glyphs\n\t\"Not Word Char\": literalRegexNodeType(\"Not Word Char\",\"\\\\W\"),\n\t\"Word Boundary\": literalRegexNodeType(\"Word Boundary\",\"\\\\b\", () => \" word\"), // TODO\n\t\"Not Word Boundary\": literalRegexNodeType(\"Not Word Boundary\",\"\\\\b\", () => \"word\"), // TODO\n\t\"Digit\": literalRegexNodeType(\"Digit\",\"\\\\d\", (_properties, random) => random.upto(10)), // TODO ,-.? \n\n\t\"Whitespace Char\": literalRegexNodeType(\"Whitespace Char\",\"\\\\s\", (_properties, random) => random.select([\n\t\t\" \", \"\\t\", \"\\r\", \"\\n\", \"\\v\", \"\\f\" \n\t\t// TODO ​\\u00A0\\u1680​\\u180e\\u2000​\\u2001\\u2002​\\u2003\\u2004​ \\u2005\\u2006​\\u2007\\u2008​\\u2009\\u200a​\\u2028\\u2029​\\u2028\\u2029​ \\u202f\\u205f​\\u3000\n\t])),\n\n\t\"Not Whitespace Char\": literalRegexNodeType(\"Not Whitespace Char\",\"\\\\S\"),\n\n\t\"Not Linebreak\": literalRegexNodeType(\"Not Linebreak\", \".\"),\n\t\"Linebreak\": literalCharacterNodeType(\"Linebreak\",\"\\\\n\", \"\\n\"),\n\t\"Tab\": literalCharacterNodeType(\"Tab\",\"\\\\t\", \"\\t\"), \n\n\t// TODO \\p{} es2018\n\n\t\"Never\": literalRegexNodeType(\"Never\", \"(?!)\", () => \"\"),\n\t\"Any\": literalRegexNodeType(\"Any\", \"(?:)\"),\n\n\t\"Literal\": {\n\t\tprecedence: 2, // TODO is atomic(precedence 5) if contains only a single char\n\t\tdefaultProperties: () => [ PropertyTypes.Characters.create(\"Literal\", \"the\") ],\n\t\tbuild: properties => escapeInput(properties[0]),\n\t\tgenerate: properties => properties[0].value,\n\t},\n\n\t\"Any of Chars\": {\n\t\tprecedence: 5,\n\t\tdefaultProperties: () => [ PropertyTypes.Characters.create(\"Any of Chars\", \":!?.,\") ],\n\t\tbuild: properties => \"[\" + escapeCharsInBracket(properties[0].value) + \"]\",  // TODO deduplicate\n\t\tgenerate: (properties, random) => random.select(properties[0].value)\n\t},\n\n\t\"None of Chars\": {\n\t\tprecedence: 5,\n\t\tdefaultProperties: () => [ PropertyTypes.Characters.create(\"None of Chars\", \":!?.,\") ],\n\t\tbuild: properties => \"[^\" + escapeCharsInBracket(properties[0].value) + \"]\",  // TODO deduplicate\n\t\tgenerate: (properties, random) => findCharacter(random, \"[^\" + escapeCharsInBracket(properties[0].value) + \"]\"),\n\t},\n\n\t\"Char Range\": {\n\t\tprecedence: 5,\n\t\tdefaultProperties: () => [\n\t\t\tPropertyTypes.Label.create(\"Char Range\"),\n\t\t\tPropertyTypes.Character.create(\"Start\", \"a\"), \n\t\t\tPropertyTypes.Character.create(\"End\", \"z\") \n\t\t],\n\t\tbuild: properties => \"[\" + escapeCharacter(properties[0]) + \"-\" + escapeCharacter(properties[1]) + \"]\",\n\t\tgenerate: (properties, random) => {\n\t\t\tconst start = properties[0].value.charCodeAt(0)\n\t\t\tconst end = properties[1].value.charCodeAt(0)\n\t\t\tconst charCode = random.range(start, end + 1)\n\t\t\treturn String.fromCharCode(charCode)\n\t\t},\n\t},\n\n\t\"Not in Char Range\": {\n\t\tprecedence: 5,\n\t\tdefaultProperties: () => [ \n\t\t\tPropertyTypes.Label.create(\"Not in Char Range\"),\n\t\t\tPropertyTypes.Character.create(\"Start\", \"A\"), \n\t\t\tPropertyTypes.Character.create(\"End\", \"Z\") \n\t\t],\n\t\tbuild: properties => \"[^\" + escapeCharacter(properties[0]) + \"-\" + escapeCharacter(properties[1]) + \"]\",\n\t\tgenerate: (properties, random) => findCharacter(random, \"[^\" + escapeCharacter(properties[0]) + \"-\" + escapeCharacter(properties[1]) + \"]\"),\n\t},\n\n\n\t\"Any Of\": {\n\t\tprecedence: 1,\n\t\tdefaultProperties: () => [\n\t\t\tPropertyTypes.Label.create(\"Any Of\"),\n\t\t\tPropertyTypes.Node.create(\"Option\", true),\n\t\t], \n\t\tbuild: (properties, graph) => {\n\t\t\tconst connected = properties.filter(p => p.value != null)\n\t\t\tif (!connected.length) return NodeTypes[\"Never\"].build()\n\t\t\telse return connected.map(e => buildInputWithPrecedence(1, e, graph)).join(\"|\")\n\t\t},\n\t\tgenerate: (properties, random, graph) => {\n\t\t\tconst connected = properties.filter(p => p.value != null)\n\t\t\tif (!connected.length) return NodeTypes[\"Never\"].generate() \n\t\t\telse return GraphState.generate(random.select(connected).value, random, graph)\n\t\t}\n\t},\n\n\t\"Sequence\": {\n\t\tprecedence: 2,\n\t\tdefaultProperties: () => [\n\t\t\tPropertyTypes.Label.create(\"Sequence\"),\n\t\t\tPropertyTypes.Node.create(\"Next\", true),\n\t\t],\n\t\tbuild: (properties, graph) => {\n\t\t\tconst connected = properties.filter(p => p.value != null)\n\t\t\tif (!connected.length) return NodeTypes[\"Never\"].build()\n\t\t\telse return connected.map(e => buildInputWithPrecedence(2, e, graph)).join(\"\")\n\t\t},\n\t\tgenerate: (properties, random, graph) => {\n\t\t\tconst connected = properties.filter(p => p.value != null)\n\t\t\tif (!connected.length) return NodeTypes[\"Never\"].generate(null, random)\n\t\t\telse return connected.map(e => generatePropertyInput(e, random, graph)).join(\"\")\n\t\t},\n\t},\n\n\t\"Capture\": {\n\t\tprecedence: 5,\n\t\tdefaultProperties: () => [\n\t\t\tPropertyTypes.Node.create(\"Capture\"),\n\t\t],\n\t\tbuild: (properties, graph) => \"(\" + buildPropertyInput(properties[0], graph) + \")\",\n\t\tgenerate: (properties, random, graph) => generatePropertyInput(properties[0], random, graph),\n\t},\n\n\t\"Optional\": {\n\t\tprecedence: 4,\n\t\tdefaultProperties: () => [  \n\t\t\tPropertyTypes.Node.create(\"Optional\"),\n\t\t],\n\t\tbuild: (properties, graph) => buildInputWithPrecedence(4, properties[0], graph) + \"?\",\n\t\tgenerate: (properties, random, graph) => {\n\t\t\tif (random.chance(0.6)) return \"\"\n\t\t\telse return generatePropertyInput(properties[0], random, graph)\n\t\t},\n\t},\n\n\t\"At Least One\": {\n\t\tprecedence: 4,\n\t\tdefaultProperties: () => [\n\t\t\tPropertyTypes.Node.create(\"At Least One\"),\n\t\t\tPropertyTypes.Bool.create(\"Lazy\", false),\n\t\t],\n\t\tbuild: (properties, graph) => buildInputWithPrecedence(4, properties[0], graph) + \"+\" + (properties[1].value? \"?\" : \"\"),\n\t\tgenerate: (properties, random, graph) => {\n\t\t\tlet result = generatePropertyInput(properties[0], random, graph)\n\t\t\twhile(random.chance(0.7)) result += generatePropertyInput(properties[0], random, graph)\n\t\t\treturn result\n\t\t},\n\t},\n\n\t\"Any Repetition\": {\n\t\tprecedence: 4,\n\t\tdefaultProperties: () => [\n\t\t\tPropertyTypes.Node.create(\"Any Repetition\"),\n\t\t\tPropertyTypes.Bool.create(\"Lazy\", false),\n\t\t],\n\t\tbuild: (properties, graph) => buildInputWithPrecedence(4, properties[0], graph) + \"*\" + (properties[1].value? \"?\" : \"\"),\n\t\tgenerate: (properties, random, graph) => {\n\t\t\tlet result = \"\"\n\t\t\twhile(random.chance(0.5)) // TODO greedy?\n\t\t\t\tresult += generatePropertyInput(properties[0], random, graph)\n\t\t\treturn result\n\t\t},\n\t},\n\n\t\"Exact Repetition\": {\n\t\tprecedence: 4,\n\t\tdefaultProperties: () => [\n\t\t\tPropertyTypes.Node.create(\"Exact Repetition\"),\n\t\t\tPropertyTypes.Number.create(\"Count\", 3),\n\t\t],\n\t\tbuild: (properties, graph) => buildInputWithPrecedence(4, properties[0], graph) + \"{\" + properties[1].value + \"}\",\n\t\tgenerate: (properties, random, graph) => {\n\t\t\tlet result = \"\"\n\t\t\tfor (let i = 0; i < properties[1].value; i++)\n\t\t\t\tresult += generatePropertyInput(properties[0], random, graph)\n\n\t\t\treturn result\n\t\t},\n\t},\n\n\t\"Ranged Repetition\": {\n\t\tprecedence: 4,\n\t\tdefaultProperties: () => [\n\t\t\tPropertyTypes.Node.create(\"Ranged Repetition\"),\n\t\t\tPropertyTypes.Number.create(\"Minimum\", 2),\n\t\t\tPropertyTypes.Number.create(\"Maximum\", 3),\n\t\t\tPropertyTypes.Bool.create(\"Minimal\", false),\n\t\t],\n\t\tbuild: (properties, graph) => buildInputWithPrecedence(4, properties[0], graph) + \"{\" + properties[1].value + \",\" + properties[2].value + \"}\" + (properties[3].value? \"?\" : \"\"),\n\t\tgenerate: (properties, random, graph) => {\n\t\t\tconst count = random.range(properties[1].value, properties[2].value + 1)\n\t\t\tlet result = \"\"\n\n\t\t\t// FIXME escalates quickly\n\n\t\t\t// TODO minimum\n\t\t\tfor (let i = 0; i < count; i++)\n\t\t\t\tresult += generatePropertyInput(properties[0], random, graph)\n\n\t\t\treturn result\n\t\t},\n\t},\n\n\t/*\"Minimum Repetition\": {\n\t\tbuild: (node, graph) => buildInput(node, graph.element) + \"{\" + node.count + \",}\",\n\t},*/\n\n\t\"If At End\": {\n\t\tprecedence: 3, // TODO\n\t\tdefaultProperties: () => [\n\t\t\tPropertyTypes.Node.create(\"If At End\"),\n\t\t],\n\t\tbuild: (properties, graph) => buildInputWithPrecedence(3, properties[0], graph) + \"$\",\n\n\t\t// TODO would need to check globally\n\t\tgenerate: (properties, random, graph) => generatePropertyInput(properties[0], random, graph), \n\t},\n\n\t\"If At Start\": {\n\t\tprecedence: 3, // TODO\n\t\tdefaultProperties: () => [\n\t\t\tPropertyTypes.Node.create(\"If At Start\"),\n\t\t],\n\t\tbuild: (properties, graph) => \"^\" + buildInputWithPrecedence(3, properties[0], graph),\n\n\t\t// TODO would need to check globally\n\t\tgenerate: (properties, random, graph) => generatePropertyInput(properties[0], random, graph), // TODO add random chars\n\t},\n\n\t\"If Followed By\": {\n\t\tprecedence: 3,\n\t\tdefaultProperties: () => [\n\t\t\tPropertyTypes.Node.create(\"If Followed By\"),\n\t\t\tPropertyTypes.Node.create(\"Successor\"),\n\t\t],\n\t\tbuild: (properties, graph) => buildInputWithPrecedence(3, properties[0], graph) + \"(?=\" + buildPropertyInput(properties[1], graph) + \")\",\n\t\tgenerate: (properties, random, graph) => generatePropertyInput(properties[0], random, graph) + generatePropertyInput(properties[1], random, graph),\n\t},\n\n\t\"If Not Followed By\": {\n\t\tprecedence: 3,\n\t\tdefaultProperties: () => [ \n\t\t\tPropertyTypes.Node.create(\"If Not Followed By\"),\n\t\t\tPropertyTypes.Node.create(\"Successor\"),\n\t\t],\n\t\tbuild: (properties, graph) => buildInputWithPrecedence(3, properties[0], graph) + \"(?!\" + buildPropertyInput(properties[1], graph) + \")\",\n\t\tgenerate: (properties, random, graph) => generatePropertyInput(properties[0], random, graph), // TODO\n\t}\n}\n\n\n\n// TODO use operator precedence\n// TODO explicit output?\n\nconst escapeInput = input => escapeCharacters(input.value)\nconst escapeCharacter = input => escapeCharacters(input.value[0])\nconst escapeCharacters = chars => {\n\t// TODO use a regex\n\tconst needsBackslash = \"[]{}()|^.-+*?!$/\\\\\"\n\tlet result = \"\"\n\n\tfor (let char of chars){\n\t\tif (needsBackslash.includes(char))\n\t\t\tresult += \"\\\\\"\n\n\t\tresult += char\n\t}\n\n\treturn result\n}\n\nconst escapeCharsInBracket = chars => {\n\t// TODO use a regex\n\tconst needsBackslash = \".[]^-\\\\\"\n\tlet result = \"\"\n\n\tfor (let char of chars){\n\t\tif (needsBackslash.includes(char))\n\t\t\tresult += \"\\\\\"\n\n\t\tresult += char\n\t}\n\n\treturn result\n}\n\nconst findCharacter = (random, regexSource) => {\n\tconst regex = new RegExp(regexSource)\n\tconst notStrangeWhitespace = /[ \\t\\S]/\n\n\twhile (true){\n\t\t// favor simple ascii letters a percentage of 90%\n\t\tif (random.chance(0.9)){\n\t\t\tconst char = String.fromCharCode(random.upto(256)) \n\t\t\tif (regex.test(char) && notStrangeWhitespace.test(char)) \n\t\t\t\treturn char\n\t\t}\n\t\t\n\t\telse { // spice things up with some really unexpected characters\n\t\t\tconst char = String.fromCharCode(random.upto(65000)) \n\t\t\tif (regex.test(char) && notStrangeWhitespace.test(char)) \n\t\t\t\treturn char\n\t\t}\n\t}\n}\n\n/*const randomRange = (min, max) => Math.floor(min + Math.random() * (max - min))\nconst selectRandom = choice => choice[Math.floor(Math.random() * choice.length)]*/\n\n\n\nexport { NodeTypes, PropertyTypes }","import React from 'react'\nimport { PropertyTypes } from \"./NodeTypes\"\n\nconst propertyHeight = 25\n\n// TODO use\nconst classes = classes => Object.entries(classes)\n\t.filter(([_, enabled]) => enabled)\n\t.map(([name]) => name).join(\" \")\n\n\n/*const RawConnectionComponent = props => <line className=\"connection\" // TODO offset y by property index\n\tx1={props.node2.position.x} \n\ty1={props.node2.position.y + propertyHeight * (props.index + 0.5) } \n\tx2={props.node1.position.x + props.node1.width} \n\ty2={props.node1.position.y + propertyHeight * 0.5} \n/>*/\n\nconst RawConnectionComponent = props => {\n\tconst x1 = props.node2.position.x \n\tconst y1 = props.node2.position.y + propertyHeight * (props.index + 0.5)  \n\tconst x2 = props.node1.position.x + props.node1.width\n\tconst y2 = props.node1.position.y + propertyHeight * 0.5\n\tconst h1dx = Math.abs(x2 - x1) * -0.4\n\tconst h2dx = Math.abs(x2 - x1) * 0.4\n\n\treturn <path className={\"connection \" + props.className} // TODO offset y by property index\n\t\td = { `M ${x1} ${y1} C ${x1 + h1dx} ${y1}, ${x2 + h2dx} ${y2}, ${x2} ${y2}` }\n\t/>\n}\n\nconst ConnectionComponent = props => props.node.properties\n\t.map((property, index) => ({ property, index })) // capture index before filtering\n\t.filter(p => p.property.type === \"Node\" && p.property.value != null)\n\t.map(p => <RawConnectionComponent\n\t\tnode1={props.graph.nodes[p.property.value]} \n\t\tnode2={props.node} index={p.index}\n\t/>)\n\nconst PropertyComponent = props => <div \n\tclassName={\"property\" \n\t\t+ (props.connectOutput? \" main\" :\"\")\n\t\t+ (props.connectInput? \" connectable-input\" :\"\")\n\t} \n\n\tstyle={{ height: propertyHeight + \"px\" }}\n\tonContextMenu={e => e.preventDefault()}\n\tonMouseEnter={() => props.onPropertyEnter() }\n\tonMouseDown={e => {\n\t\tif (e.button == 0) props.onLeftPress()\n\t\telse if (e.button == 2) props.onRightPress()\n\t}}\n>\n\t{<div className={(props.connectInput? \"\" : \"inactive \") + \"left connector\"}></div>}\n\t\n\t<span className=\"title\">{props.property.name}</span>\n\n\t{\n\t\tprops.property && PropertyTypes[props.property.type].render({ \n\t\t\tonChange: newValue => props.onChange(newValue), \n\t\t\tvalue: props.property.value, \n\t\t})\n\t}\n\n\n\t{<div className={(props.connectOutput? \"\" : \"inactive \") + \"right connector\"}></div>}\n</div>\n\n\nconst NodeComponent = props => <div\n\tclassName={ \"graph-node\" \n\t\t+ (props.selected? \" selected\" : \"\") \n\t\t+ (props.connecting? \" connecting\" : \"\")\n\t\t+ (props.dragged? \" dragged\" : \"\")\n\t}\n\tstyle={{ width: props.node.width + \"px\", transform: `translate(${props.node.position.x}px, ${props.node.position.y}px)` }}\n>\n\t{\n\t\tprops.node.properties\n\t\t\t.map((property, index) => <PropertyComponent\n\t\t\t\tproperty={property}\n\t\t\t\tconnectInput={property.type === \"Node\"}\n\t\t\t\tconnectOutput={index == 0}\n\n\t\t\t\tonPropertyEnter={() => props.onPropertyEnter(index) }\n\t\t\t\tonLeftPress={() => props.onLeftPress() }\n\t\t\t\tonRightPress={() => props.onRightPress(index) }\n\t\t\t\tonChange={newValue => props.onInputChanged(props.id, index, newValue)}\n\t\t\t/>)\n\t}\n</div>\n\n\n\nexport { NodeComponent, PropertyComponent, ConnectionComponent, RawConnectionComponent }","import React from 'react'\nimport './App.css'\n\n// https://www.regular-expressions.info/email.html\n// https://stackoverflow.com/questions/46155/how-to-validate-an-email-address-in-javascript?rq=1\n\n// TODO:\n// - on node hover, highlight corresponding part in the built regex\n// - automatically layout nodes generated from parsing a regex\n// - user supplied example text\n// - separate css into layout and theme\n\n\n// import { NodeTypes } from './NodeTypes'\nimport { GraphState, NodeState, ViewState } from './NodeState'\nimport { NodeComponent, ConnectionComponent, RawConnectionComponent } from './NodeComponents'\nimport { NodeTypes } from './NodeTypes'\nimport { parse } from \"./parse\"\n\nconst AppState = {\n\tcreate: () => ({\n\t\tview: ViewState.create(),\n\t\tgraph: GraphState.create(),\n\t\tdragged: null,\n\t\tconnection: null,\n\t\tresult: 0,\n\t\tsearch: null,\n\t}),\n\n\taddNode: (state, node) => {  // update required for auto connect\n\t\tif (Object.keys(state.graph.nodes).length == 1) return AppState.updateCache({\n\t\t\t...state, graph: GraphState.addNode(state.graph, node, Object.keys(state.graph.nodes)[0]) \n\t\t})\n\t\telse return {\n\t\t\t...state, graph: GraphState.addNode(state.graph, node) \n\t\t}\n\t},\n\n\taddNodeWithInputs: (state, node) => AppState.updateCache({ // update required for auto connect\n\t\t...state, graph: GraphState.addNodeWithInputs(state.graph, node) \n\t}),\n\t\n\tpressMove: (state, index) => {\n\t\tif (state.graph.nodes[index].type == \"Expression Result\" && state.result != index)\n\t\t\treturn AppState.updateCache({ ...state, dragged: index, result: index })\n\n\t\telse return { ...state, dragged: index, }\n\t},\n\n\tpressConnect: (state, index, input) => ({\n\t\t...state, connection: { node: index, property: input }\n\t}),\n\n\tconnect: (state, nodeIndex, input) => {\n\t\tif (!state.connection) return state\n\n\t\tconst graph = GraphState.connect(state.graph, \n\t\t\tstate.connection.node, nodeIndex, input\n\t\t)\n\n\t\tif (!graph) return state\n\t\telse return AppState.updateCache({ ...state, graph, connection: null })\n\t},\n\n\trelease: state => ({ \n\t\t...state, dragged: null, connection: null, \n\t}),\n\n\tmoveNode: (state, delta) => ({ \n\t\t...state, graph: GraphState.move(state.graph, state.dragged, ViewState.inverseTransformDirection(state.view, delta))\n\t}),\n\n\tmoveConnect: (state, position) => ({ \n\t\t...state, connection: { ...state.connection, target: ViewState.inverseTransformPoint(state.view, position) },\n\t}),\n\n\tsetNodeInput: (state, node, input, value) => AppState.updateCache({ ...state, graph: GraphState.setNodeInput(state.graph, node, input, value) }),\n\n\tmagnify: (state, target, deltaY) => ({ ...state, view: ViewState.magnify(state.view, target, deltaY) }),\n\t\n\tnextRandomSeed: state => AppState.updateCache({ ...state, graph: { ...state.graph, seed: state.graph.seed + 1 } }),\n\n\tupdateCache: state => {\n\t\tconst exampleText = \"‘Now off their harbour there lies a wooded and fertile is- land not quite close to the land of the Cyclopes, but still not far. It is over-run with wild goats, that breed there in great numbers and are never disturbed by foot of man; for sports- men—who as a rule will suffer so much hardship in forest or among mountain precipices—do not go there, nor yet again is it ever ploughed or fed down, but it lies a wilderness untilled and unsown from year to year, and has no living thing upon it but only goats. For the Cyclopes have no ships, nor yet shipwrights who could make ships for them; they cannot therefore go from city to city, or sail over the sea to one another’s country as people who have ships can do; if they had had these they would have colonised the island, {78} for it is a very good one, and would yield everything in due season. There are meadows that in some places come right down to the sea shore, well watered and full of lus- cious grass; grapes would do there excellently; there is level land for ploughing, and it would always yield heavily at har- vest time, for the soil is deep.\"\n\t\tconst regex = GraphState.build(state.result, state.graph)\n\n\t\tif (state.cache && regex === state.cache.regex)\n\t\t\treturn state\n\n\n    // return { ...state, cache: { regex, matches: [] } } // FIXME\n    \n    \n\t\tconst compiledRegex = eval(regex) // careful there!\n\n\t\t// console.log(exampleText.match(compiledRegex))\n\n\t\tconst words = exampleText.repeat(6).split(\" \")\n\n\t\tfor(let i = 0; i < 30; i++)\n\t\t\twords.splice((i*14) % words.length, 0, GraphState.generateSeeded(state.result, state.graph, i))\n\n\t\t// const exampleHTML = words.join(\" \").replace(compiledRegex, \"<span\\nclass='match'>$&</span>\")\n\t\tconst augmentedExampleText = words.join(\" \")\n\t\tconst matches = []\n\n\t\tlet match = null\n\t\tlet fillStart = 0\n\t\twhile ((match = compiledRegex.exec(augmentedExampleText)) != null) {\n\t\t\tmatches.push({\n\t\t\t\tfill: match.input.slice(fillStart, match.index), \n\t\t\t\tmatch: match[0] \n\t\t\t})\n\n\t\t\tfillStart = compiledRegex.lastIndex\n\t\t}\n\n\t\tmatches.push({\n\t\t\tfill: augmentedExampleText.slice(compiledRegex.lastIndex),\n\t\t\tmatch: \"\",\n\t\t})\n\n\t\n\n\t\t/*\n\t\tlet remaining = augmentedExampleText\n\t\twhile(remaining.length){\n\t\t\tconst match = compiledRegex.exec(remaining)\n\t\t\tconsole.log(match)\n\t\t\tif (match){\n\t\t\t\tmatches.push({ fill: remaining.slice(0, match.index), match: match[0] })\n\t\t\t\tremaining = remaining.slice(match.index + match[0].length)\n\t\t\t\tconsole.log({ fill: remaining.slice(0, match.index), match: match[0] })\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmatches.push({ fill: remaining, match: \"\" })\n\t\t\t\tremaining = \"\"\n\t\t\t}\n\t\t}*/\n\n\t\t// const matches = augmentedExampleText.match(compiledRegex)\n\t\t// , \"<span\\nclass='match'>$&</span>\")\n\t\t\n\t\t// const exampleNonWhite = exampleHTML.replace(/ /g, \"·\\u200B\")\n\t\t\n\n\t\treturn ({\n\t\t\t...state,\n\t\t\tcache: {\n\t\t\t\tregex, \n\t\t\t\tmatches: matches.map(({match, fill}) => [\n\t\t\t\t\t<span>{fill}</span>, <span className=\"match\">{match}</span>\n\t\t\t\t]), // FIXME\n\t\t\t}\n\t\t})\n\t},\n\n\tparseRegexToNodes: state => {\n\t\tconst node = parse(state.search)\n\t\treturn node? AppState.addNodeWithInputs(state, node) : state\n\t}\n}\n\n\nclass App extends React.Component {\n\tconstructor(props){\n\t\tsuper(props)\n\n\t\tthis.state = AppState.create() \n\n\t\tconst initialNode = NodeState.create(\n\t\t\tViewState.inverseTransformPoint(this.state.view, {\n\t\t\t\tx: window.innerWidth / 2, y: window.innerHeight / 2\n\t\t\t}), \n\t\t\t\"Expression Result\"\n\t\t)\n\t\t// NodeState.create({ x:100, y:100 }, \"Expression Result\")\n\t\t\n\t\tthis.state = AppState.addNode(this.state, initialNode)\n\t\tthis.state = AppState.updateCache(this.state)\n\t}\n\n\tcomponentDidMount(){  // nasty stuff\n\t\tif (!this.listener) this.listener = document.addEventListener(\"keydown\", e => {\n\t\t\tif (e.ctrlKey && e.key === \" \"){\n\t\t\t\tthis.setState(state => ({...state, search: \"\" }))\n\t\t\t}\n\t\t})\n\t}\n\n\tcomponentWillUnmount(){\n\t\tif (this.listener){\n\t\t\tdocument.removeEventListener(\"keydown\", this.listener)\n\t\t\tthis.listener = null \n\t\t}\n\t}\n\n\trender(){\n\t\tconst offset = this.state.view.offset\n\t\tconst scale = ViewState.getTransformScale(this.state.view.magnification)\n\t\tlet searchRegex = null\n\n\t\ttry {\n\t\t\tsearchRegex = this.state.search != null && new RegExp(this.state.search, \"igm\")\n\t\t}\n\t\tcatch (_){}\n\t\t\n\t\treturn [\n\t\t\t<div id=\"example-text\"> {\n\t\t\t\tthis.state.cache.matches\n\t\t\t} </div>,\n\n\n\t\t\t<svg id=\"connection-graph\"\n\t\t\t\tclassName = { this.state.connection? \"connect-dragging\" : \"\" }\n\t\t\t>\n\t\t\t\t<g transform={`translate(${offset.x}, ${offset.y}) scale(${scale}, ${scale})`} \n\t\t\t\t\tclassName=\"transform\"\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\tObject.entries(this.state.graph.nodes)\n\t\t\t\t\t\t\t.map(([id, node]) => <ConnectionComponent\n\t\t\t\t\t\t\t\tnode={node} key={id} graph={this.state.graph}\n\t\t\t\t\t\t\t/>)\n\t\t\t\t\t}\n\n\t\t\t\t\t{(this.state.connection && this.state.connection.target) && <RawConnectionComponent\n\t\t\t\t\t\tnode1={this.state.graph.nodes[this.state.connection.node]}\n\t\t\t\t\t\tindex={-0.5} node2={{ position: this.state.connection.target }}\n\t\t\t\t\t\tclassName=\"prototype\"\n\t\t\t\t\t/>}\n\t\t\t\t</g>\n\t\t\t</svg>,\n\n\t\t\t<div \n\t\t\t\tid=\"node-graph\"\n\t\t\t\tclassName = { this.state.connection? \"connect-dragging\" : \"\" }\n\t\t\t\tonWheel={ e => {\n\t\t\t\t\tconst delta = -Math.sign(e.deltaY)\n\t\t\t\t\tconst target = {x: e.clientX, y: e.clientY}\n\t\t\t\t\tthis.setState(state => AppState.magnify(state, target, delta))\n\t\t\t\t} }\n\n\t\t\t\tonContextMenu={e => e.preventDefault()}\n\t\t\t\tonMouseUp = { event => {\n\t\t\t\t\tthis.setState(state => AppState.release(state))\n\t\t\t\t} }\n\t\t\t\tonMouseLeave = { () => this.setState(state => AppState.release(state)) }\n\t\t\t\tonMouseMove = { e => {\n\t\t\t\t\tconst delta = { x: e.movementX, y: e.movementY }\n\t\t\t\t\tconst position = { x: e.clientX, y: e.clientY }\n\t\t\t\t\tthis.setState(state => state.connection?\n\t\t\t\t\t\tAppState.moveConnect(state, position) :\n\t\t\t\t\t\tAppState.moveNode(state, delta)\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div \n\t\t\t\t\tstyle={{ transform: `translate(${offset.x}px, ${offset.y}px) scale(${scale}, ${scale})`} }\n\t\t\t\t\tclassName=\"transform\"\n\t\t\t\t>\n\t\t\t\t\t{\n\t\t\t\t\t\tObject.entries(this.state.graph.nodes)\n\t\t\t\t\t\t\t.map(([id, node]) => <NodeComponent \n\t\t\t\t\t\t\t\tnode={node} id={id} key={id}\n\t\t\t\t\t\t\t\tgraph={this.state.graph} dragged={this.state.dragged == id}\n\t\t\t\t\t\t\t\tconnecting={this.state.connection && this.state.connection.node == id}\n\n\t\t\t\t\t\t\t\tonInputChanged = { (node, input, value) => this.setState(state => AppState.setNodeInput(state, node, input, value)) }\n\t\t\t\t\t\t\t\tonLeftPress = { () => this.setState(state => AppState.pressMove(state, id)) }\n\t\t\t\t\t\t\t\tonRightPress = { input => this.setState(state => AppState.pressConnect(state, id, input)) }\n\t\t\t\t\t\t\t\tonPropertyEnter = { input => this.setState(state => AppState.connect(state, id, input)) }\n\t\t\t\t\t\t\t/>)\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>,\n\t\t\t\t\n\t\t\t<div id=\"overlay\">\n\t\t\t\t<section id=\"header\">\n          <img src={process.env.PUBLIC_URL + \"/logo.svg\"} id=\"logo\"/>\n\t\t\t\t\t<h2>Regex Nodes</h2>\n\t\t\t\t\t<nav>by <a href=\"https://github.com/johannesvollmer/regex-nodes-js\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\tjohannesvollmer\n\t\t\t\t\t</a></nav>\n\t\t\t\t</section>\n\t\t\t\t\n\t\t\t\t<section id=\"search\">\n\t\t\t\t\t<input type=\"text\"\n\t\t\t\t\t\tvalue={this.state.search || \"\"} placeholder=\" Add Nodes [Ctrl Space]\"\n\t\t\t\t\t\tautoFocus={this.state.search != null}\n\t\t\t\t\t\tonFocus={ () => this.setState(state => ({... state, search: \"\" })) }\n\t\t\t\t\t\tonBlur={ () => this.setState(state => ({... state, search: null })) }\n\t\t\t\t\t\tkey={this.state.search != null /* for auto focus */}\n\t\t\t\t\t\tonKeyDown={ e => {\n\t\t\t\t\t\t\tconst enter = 13\n\t\t\t\t\t\t\tif (e.keyCode == enter && this.state.search.length != 0) this.setState(state => ({ \n\t\t\t\t\t\t\t\t...AppState.parseRegexToNodes(state),\n\t\t\t\t\t\t\t\tsearch: null\n\t\t\t\t\t\t\t}))\n\n\t\t\t\t\t\t\te.stopPropagation()\n\t\t\t\t\t\t} }\n\t\t\t\t\t\tonChange={ event => {\n\t\t\t\t\t\t\tconst value = event.target.value\n\t\t\t\t\t\t\tthis.setState(state => ({... state, search: value }))\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.search != null && <div id=\"results\">\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.state.search.length != 0 && \n\t\t\t\t\t\t\t\t\t<div id=\"parse-search\"\n\t\t\t\t\t\t\t\t\t\tonMouseDown={() => this.setState(state => ({ \n\t\t\t\t\t\t\t\t\t\t\t...AppState.parseRegexToNodes(state),\n\t\t\t\t\t\t\t\t\t\t\tsearch: null\n\t\t\t\t\t\t\t\t\t\t}))}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tAdd Regular expression `<code id=\"string\">{this.state.search}</code>` as Nodes [Enter]\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsearchRegex != null && Object.entries(NodeTypes)\n\t\t\t\t\t\t\t\t\t.filter(([name, type]) => searchRegex.test(name))\n\t\t\t\t\t\t\t\t\t.map(([name, type]) => <div key={name}\n\t\t\t\t\t\t\t\t\t\tonMouseDown={() => this.setState(state => AppState.addNode(\n\t\t\t\t\t\t\t\t\t\t\t{ ...state, search: null }, \n\t\t\t\t\t\t\t\t\t\t\tNodeState.create(ViewState.inverseTransformPoint(this.state.view, {x:window.innerWidth / 2, y:window.innerHeight / 2}), name)\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t>{name}</div>)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</section>\n\n\t\t\t\t{\n\t\t\t\t\tthis.state.result === null? null : <section id=\"regex\">\n\t\t\t\t\t\t<code>\n\t\t\t\t\t\t\tconst regex =&nbsp;\n\t\t\t\t\t\t\t<span className=\"string\">{this.state.cache.regex}</span>\n\n\t\t\t\t\t\t\t{ // TODO GraphState.build(this.state.result, this.state.graph)? null : \n\t\t\t\t\t\t\t\t/*&nbsp; <span className=\"comment\" onClick={() => this.setState(state => AppState.nextRandomSeed(state))}>\n\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;// \n\t\t\t\t\t\t\t\t\twould match `{this.state.cache.shortExample}`\n\t\t\t\t\t\t\t\t</span>*/\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t</code> \n\t\t\t\t\t</section>\n\n\t\t\t\t}\n\t\t\t</div>,\n\t\t]\n\t}\n}\n\nexport default App","import { NodeState } from \"./NodeState\";\n\n// TODO not working: [abc]\\s?\n\nconst parse = string => {\n\tif (string == null || !string.length)\n\t\treturn []\n\n\telse return parseExpressionResult(string)\n}\n\n\nconst parseExpressionResult = string => {\n\tif (string.startsWith(\"/\")){\n\t\tconst findFlags = /(?:\\/[igm]{0,3})$/i\n\t\tconst match = string.match(findFlags)\n\n\t\tif (match) {\n\t\t\tconst expression = string.slice(1, match.index) // 1: skip first '/'\n\t\t\tconst flags = match[0]\n\n\t\t\tconst multipleMatches = (/g/i).test(flags)\n\t\t\tconst caseSensitive = !(/i/i).test(flags)\n\t\t\tconst multiline = (/m/i).test(flags)\n\n\t\t\treturn NodeState.createWithInputValues({x:0, y:0}, \"Expression Result\", [\n\t\t\t\tparseAlternation(expression).node,\n\t\t\t\tmultipleMatches,\n\t\t\t\tcaseSensitive,\n\t\t\t\tmultiline\n\t\t\t])\n\t\t}\n\t\telse return parseAlternation(string).node\n\t}\n\n\treturn parseAlternation(string).node\n}\n\nconst parseAlternation = (string, predicate) => {\n\tconst endSequence = remaining => !/^[\\|\\]\\)]/.test(remaining)\n\tconst first = parseSequence(string, endSequence)\n\tstring = first.remaining\n\n\tif (!first.node)\n\t\treturn first\n\n\tconst options = [first.node]\n\n\twhile (string.length && string.startsWith(\"|\") && (!predicate || predicate(string))){ \n\t\tstring = string.slice(1) // skip \"|\"\n\n\t\tconst sequence = parseSequence(string, endSequence) // TODO consumes closing ')'?\n\t\toptions.push(sequence.node)\n\t\tstring = sequence.remaining\n\t}\n\n\tif (options.length == 1) return { node: options[0], remaining: string }\n\telse return { node: NodeState.createWithInputValues({x:0, y:0}, \"Any Of\", options), remaining: string }\n}\n\nconst parseSequence = (string, predicate) => {\n\tconst members = []\n\n\twhile(string.length && predicate(string)){\n\t\tconst member = parsePositioned(string)\n\t\tmembers.push(member.node)\n\t\tstring = member.remaining\n\t}\n\t\n\t// collapse subsequential literals into single literal\n\tconst simplified = []\n\tfor(let member of members){\n\t\tconst last = simplified.length && simplified[simplified.length - 1]\n\t\tif (last && member.type == \"Literal\" && last.type == \"Literal\")\n\t\t\tlast.properties[0].value += member.properties[0].value\n\n\t\telse simplified.push(member)\n\t}\n\n\tif (simplified.length == 1) return { node: simplified[0], remaining: string }\n\telse return { node: NodeState.createWithInputValues({x:0, y:0}, \"Sequence\", simplified), remaining: string }\n}\n\nconst parsePositioned = string => {\n  return parseLookahead(string)\n\n  // TODO:\n  let atBeginning = false\n  if (string.startsWith(\"^\")){\n    string = string.slice(1)\n    atBeginning = true\n  }\n\n  const element = parseLookahead(string)\n  string = element.remaining\n  \n  if (string.startsWith(\"$\")){\n\n  }\n  else {\n    \n  }\n} \n\nconst parseLookahead = string => {\n\treturn parseQuantified(string)\n} \n\nconst parseQuantified = string => {\n\tconst atom = parseAtom(string)\n\tstring = atom.remaining\n\n\tif (atom.node == null)\n\t\treturn atom\n\t\n\tif (string.startsWith(\"?\")) return { \n\t\tnode: NodeState.createWithInputValues({x:0, y:0}, \"Optional\", [atom.node]), \n\t\tremaining: string.slice(1) \n\t}\n\n\tconst minimal = string => {\n\t\tif (string.startsWith(\"?\")) return {\n\t\t\tvalue: true, remaining: string.slice(1)\n\t\t}\n\t\telse return { \n\t\t\tvalue: false, remaining: string \n\t\t}\n\t}\n\t\n\n\tif (string.startsWith(\"*\")) {\n\t\tconst isMinimal = minimal(string.slice(1))\n\t\treturn { \n\t\t\tremaining: isMinimal.remaining,\n\t\t\tnode: NodeState.createWithInputValues({x:0, y:0}, \"Any Repetition\", [\n\t\t\t\tatom.node, isMinimal.value\n\t\t\t]), \n\t\t}\n\t}\n\telse if (string.startsWith(\"+\")) {\n\t\tconst isMinimal = minimal(string.slice(1))\n\t\treturn { \n\t\t\tremaining: isMinimal.remaining,\n\t\t\tnode: NodeState.createWithInputValues({x:0, y:0}, \"At Least One\", [\n\t\t\t\tatom.node, isMinimal.value\n\t\t\t]), \n\t\t} \n\t}\n\telse if (string.startsWith(\"{\")){\n\t\tstring = string.slice(1)\n\t\tconst closing = string.indexOf(\"}\") // TODO error check\n\t\tconst range = string.slice(0, closing)\n\t\tconst remaining = string.slice(closing + 1) // skip '}'\n\t\tconst limits = range.split(\",\")\n\n\t\tif (limits.length == 1) return { \n\t\t\tremaining,\n\t\t\tnode: NodeState.createWithInputValues({x:0, y:0}, \"Exact Repetition\", [\n\t\t\t\tatom.node,\n\t\t\t\tparseInt(limits[0])\n\t\t\t]), \n\t\t}\n\t\telse if (limits.length === 2 && limits[1].length === 0) {\n\t\t\tconst isMinimal = minimal(remaining)\n\t\t\treturn { \n\t\t\t\tremaining: isMinimal.remaining,\n\t\t\t\tnode: NodeState.createWithInputValues({x:0, y:0}, \"Minimum Repetition\", [\n\t\t\t\t\tatom.node,\n\t\t\t\t\tparseInt(limits[0]),\n\t\t\t\t\tisMinimal.value\n\t\t\t\t]), \n\t\t\t}\n\t\t}\n\t\telse if (limits.length == 2) {\n\t\t\tconst isMinimal = minimal(remaining)\n\t\t\treturn { \n\t\t\t\tremaining: isMinimal.remaining,\n\t\t\t\tnode: NodeState.createWithInputValues({x:0, y:0}, \"Ranged Repetition\", [\n\t\t\t\t\tatom.node,\n\t\t\t\t\tparseInt(limits[0]),\n\t\t\t\t\tparseInt(limits[1]),\n\t\t\t\t\tisMinimal.value\n\t\t\t\t]), \n\t\t\t}\n\t\t}\n\t\t// TODO throw error\n\t}\n\n\telse return atom\n}\n\nconst parseAtom = string => {\n\tif (string.startsWith(\"[\"))\n\t\treturn parseCharset(string)\n\n\telse if (string.startsWith(\"\\\\\"))\n\t\treturn parseEscapedAtom(string, {\n\t\t\t...escape.digit, ...escape.word, ...escape.white, \n\t\t\t...escape.tab, ...escape.linebreak, \n\t\t\t...escape.boundary\n\t\t})\n\n\telse if (string.startsWith(\"(?:\"))\n\t\treturn parseGroup(string)\n\n\telse if (string.startsWith(\"(\"))\n\t\treturn parseCapturingGroup(string)\n\n\telse return parseCharAtom(string) \n}\n\nconst parseCharset = string => {\n\tconst options = []\n\tlet inverted = false\n\t\n\tstring = string.slice(1) // skip \"[\"\n\tif (string.startsWith(\"^\")){\n\t\tstring = string.slice(1) // skip \"^\"\n\t\tinverted = true\n\t}\n\n\tlet chars = \"\"\n\n\twhile(string.length && !string.startsWith(\"]\")){\n\t\tif (string.startsWith(\"-\")){\n\t\t\tthrow \"range not implemented\"\n\t\t}\n\t\telse {\n\t\t\tif (string.startsWith(\"\\\\\")){\n\t\t\t\tconst char = parseEscapedAtom(string, {\n\t\t\t\t\t...escape.digit, ...escape.word, ...escape.white, \n\t\t\t\t\t...escape.tab, ...escape.linebreak, \n\t\t\t\t\t...escape.dot\n\t\t\t\t})\n\n\t\t\t\tstring = char.remaining\n\t\n\t\t\t\tif (char.node.type == \"Literal\")\n\t\t\t\t\tchars += char.node.properties[0].value\n\t\n\t\t\t\telse options.push(char.node)\n\t\t\t}\n\t\t\t/*else if (string.startsWith(\".\")){\n\t\t\t\toptions.push(NodeState.create({x:0, y:0}, \"Not Linebreak\"))\n\t\t\t\tstring = string.slice(1)\n\t\t\t}*/\n\t\t\telse {\n\t\t\t\tchars += string[0]\n\t\t\t\tstring = string.slice(1)\n\t\t\t}\n\t\t}\n\t}\n\n\tif (chars.length)\n\t \toptions.push(NodeState.createWithInputValues({x:0, y:0}, \"Any of Chars\", [chars]))\n\n\tif (options.length == 1) \n\t\treturn { node: options[0], remaining: string .slice(1) /* skip ']' */ }\n\n\t// TODO if (inverted)\n\n\telse return {\n\t\tnode: NodeState.createWithInputValues({x:0, y:0}, \"Any Of\", options),\n\t\tremaining: string.slice(1) // skip ']'\n\t}\n}\n\nconst parseEscapedAtom = (string, escapeNodes) => {\n\tstring = string.slice(1) // skip \"\\\"\n\n\tif (!string.length)\n\t\treturn { node: null, remaining: string }\n\n\tconst char = string[0]\n\tconst escapeNode = escapeNodes[char]\n\n\tif (escapeNode != null) return { \n\t\tnode: NodeState.create({x:0, y:0}, escapeNode), \n\t\tremaining: string.slice(1)\n\t}\n\n\telse return parseCharLiteral(char) \n}\n\nconst escape = {\n\twhite: { \"s\": \"Whitespace Char\", \"S\": \"Not Whitespace Char\" },\n\tboundary: { \"b\": \"Word Boundary\", \"B\": \"Not Word Boundary\" },\n\tword: { \"w\": \"Word Char\", \"W\": \"Not Word Char\" },\n\tdigit: { \"d\": \"Digit\", \"D\": \"Not Digit\" },\n\tlinebreak: { \"n\": \"Linebreak\", },\n\tdot: { \".\": \"Not Linebreak\" },\n\ttab: { \"t\": \"Tab\" },\n}\n\nconst parseCharAtom = string => {\n\tif (!string.length) \n\t\treturn { node: null, remaining: \"\" }\n\n\tconst char = string[0]\n\n\tif (char == \".\") return { \n\t\tnode: NodeState.create({x:0, y:0}, \"Not Linebreak\"), \n\t\tremaining: string.slice(1)\n\t}\n\telse return { \n\t\tnode: NodeState.createWithInputValues({x:0, y:0}, \"Literal\", [char]),\n\t\tremaining: string.slice(1)\n\t}\n}\n\nconst parseCharLiteral = string => {\n\tif (!string.length) \n\t\treturn { node: null, remaining: \"\" }\n\t\n\telse return ({\n\t\tnode: NodeState.createWithInputValues({x:0, y:0}, \"Literal\", [string[0]]),\n\t\tremaining: string.slice(1)\n\t})\n}\n\nconst parseGroup = string => {\n\tstring = string.slice(3) // skip \"(?:\"\n\tconst alternation = parseAlternation(string, remaining => !remaining.startsWith(\")\"))\n\tif (!alternation.node) return alternation\n\n\treturn {\n\t\tnode: alternation.node,\n\t\tremaining: alternation.remaining.slice(1) // skip ')'\n\t}\n}\n\nconst parseCapturingGroup = string => {\n\tstring = string.slice(1) // skip \"(\"\n\tconst alternation = parseAlternation(string, remaining => !remaining.startsWith(\")\"))\n\tif (!alternation.node) return alternation\n\n\telse return {\n\t\tnode: NodeState.createWithInputValues({x:0, y:0}, \"Capture\", [alternation.node]),\n\t\tremaining: alternation.remaining.slice(1) // skip ')'\n\t}\n}\n\n\n\nexport { parse }","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}